{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Scowl",
	"patterns": [
		{
			"include": "#keyword"
		},
		{
			"include": "#string_double"
		},
		{
			"include": "#string_single"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#storage_type"
		},
		{
			"include": "#constant"
		},
		{
			"include": "#number"
		},
		{
			"include": "#json_path"
		},
		{
			"include": "#variable"
		},
		{
			"include": "#event"
		},
		{
			"include": "#function"
		}
	],
	"repository": {
		"keyword": {
			"patterns": [
				{
					"name": "keyword.control.scowl",
					"match": "\\b(default|exclusive|as|by|when|then|is|in|where|last|after|because)\\b"
				},
				{
					"name": "keyword.control.import",
					"match": "\\b(event)\\b"
				}
			]
		},
		"constant": {
			"patterns": [
				{
					"name": "constant.language.scowl",
					"match": "\\b(inf|true|false|null|second|seconds|minute|minutes|hour|hours|day|days|week|weeks)\\b"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "(=|!=|<=|>=|<(?!<)|>(?!>))",
					"name": "keyword.operator.comparison.scowl"
				},
				{
					"match": "\\b(and|or|not)\\b",
					"name": "keyword.operator.word.scowl"
				},
				{
					"match": "(<<|>>|&|\\||\\^|~)",
					"name": "keyword.operator.bitwise.scowl"
				},
				{
					"match": ":",
					"name": "punctuation.separator.dict.scowl"
				},
				{
					"match": "\\?",
					"name": "keyword.operator.logical.scowl"
				},
				{
					"match": "(:=)",
					"name": "keyword.operator.assignment.scowl"
				},
				{
					"match": "(\\+|\\-|\\*|/|//|%)",
					"name": "keyword.operator.arithmetic.go"
				}
			]
		},
		"storage_type": {
			"patterns": [
				{
					"match": "\\b(bool|int|float|string|time|map)\\b",
					"name": "support.type.builtin.scowl"
				}
			]
		},
		"string_double": {
			"name": "string.quoted.double.scowl",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.scowl",
					"match": "\\\\."
				}
			]
		},
		"string_single": {
			"name": "string.quoted.single.scowl",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.scowl",
					"match": "\\\\."
				}
			]
		},
		"event": {
			"name": "meta.generic.scowl",
			"begin": "<",
			"end": ">"
		},
		"comment": {
			"name": "comment.line.scowl",
			"begin": "(--)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.scowl"
				}
			},
			"end": "(?:\\n|$)"
		},
		"json_path": {
			"name": "string.unquoted.jsonpath.scowl",
			"match": "\\$[^\\s]*"
		},
		"number": {
			"name": "constant.numeric.scowl",
			"patterns": [
				{
					"include": "#float"
				},
				{
					"include": "#integer"
				},
				{
					"name": "invalid.illegal.name.scowl",
					"match": "\\b[0-9]+\\w+"
				}
			]
		},
		"float": {
			"match": "(\\d+\\.\\d+|\\.?\\d+)[eE][-+]?\\d+|\\d+\\.\\d+|\\.\\d+",
			"name": "constant.numeric.floating-point.scowl"
		},
		"integer": {
			"match": "\\d+\\b",
			"name": "constant.numeric.integer.scowl"
		},
		"variable": {
			"match": "[a-z_][a-z0-9_]*",
			"name": "variable.other.scowl"
		},
		"function": {
			"match": "[A-Z]\\w*",
			"name": "entity.name.function.scowl"
		}
	},
	"scopeName": "source.scowl"
}